name: Python CI/CD Pipeline

on: 
  push:
    branches: [ main, acc, tst, dev ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, acc, tst, dev ]
    types: [opened, synchronize, reopened]

jobs:
  notify-start:
    name: Notify Discord (Workflow Start)
    runs-on: ubuntu-latest
    steps:
      - name: Notify Discord - Workflow Started
        uses: appleboy/discord-webhook-action@master
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
          avatar: "https://github.com/github.png"
          username: "GitHub Actions Bot"
          message: |
            :rocket: **Workflow Iniciado** :rocket:
            **Repositório**: ${{ github.repository }}
            **Workflow**: ${{ github.workflow }}
            **Branch**: ${{ github.ref_name }}
            **Evento**: ${{ github.event_name }}
            **Commit**: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            **Execução**: [#${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    needs: notify-start
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black flake8 mypy pytest-cov
    
    - name: Run linter (flake8)
      run: |
        flake8 hello.py test_hello.py --max-line-length=120
    
    - name: Run type checker (mypy)
      run: |
        mypy hello.py test_hello.py
    
    - name: Run formatter check (black)
      run: |
        black --check hello.py test_hello.py
    
    - name: Run tests with coverage
      run: |
        pytest -v --cov=./ --cov-report=xml
      env:
        GITHUB_ACTIONS: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: github.event_name == 'push'
    
    - name: Run main script (test mode)
      run: |
        python hello.py --test
    
    - name: Run main script with arguments
      run: |
        python hello.py --add 5 3
        python hello.py --fact 6
        python hello.py --palindrome "ana"

  docker:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t hello-ci-cd .
    
    - name: Test Docker image
      run: |
        docker run --rm hello-ci-cd
        docker run --rm hello-ci-cd python hello.py --add 5 3
        docker run --rm hello-ci-cd python hello.py --fact 6
        docker run --rm hello-ci-cd python hello.py --palindrome "ana"

  deploy:
    name: Deploy to ACC
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/acc' || github.event_name == 'push' && contains(github.ref, 'tags')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Additional deployment steps
      run: |
        echo "Add your ACC environment deployment steps here"

  notify-completion:
    name: Notify Discord (Workflow Completion)
    needs: [test, docker, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Get workflow status
        id: get-status
        run: |
          if ${{ needs.test.result == 'success' && needs.docker.result == 'success' && (needs.deploy.result == 'success' || needs.deploy.result == 'skipped') }}; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
      
      - name: Notify Discord - Workflow Completed
        uses: appleboy/discord-webhook-action@master
        with:
          webhook_id: ${{ secrets.DISCORD_WEBHOOK_ID }}
          webhook_token: ${{ secrets.DISCORD_WEBHOOK_TOKEN }}
          avatar: "https://github.com/github.png"
          username: "GitHub Actions Bot"
          message: |
            ${{ steps.get-status.outputs.status == 'success' && ':white_check_mark:' || ':x:' }} **Workflow Completo** ${{ steps.get-status.outputs.status == 'success' && ':white_check_mark:' || ':x:' }}
            **Status**: ${{ steps.get-status.outputs.status }}
            **Repositório**: ${{ github.repository }}
            **Workflow**: ${{ github.workflow }}
            **Branch**: ${{ github.ref_name }}
            **Commit**: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            **Execução**: [#${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
